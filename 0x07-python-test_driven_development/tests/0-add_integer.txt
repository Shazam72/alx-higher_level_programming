This module defines an integer addition function ``add_integer(a, b=98)``.

=====
Usage
=====

``add_integer(a, b)``` returns the addition a and b.

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3
    >>> add_integer(1, -3)
    -2

The function also works with floating-point values.

    >>> add_integer(2.0, 7)
    9

Note that floats are casted to ints before addition is performed.

    >>> add_integer(5, 0.2)
    5
    >>> add_integer(-6.9, -0.2)
    -6

Floating and non-floating point values can be combined.

    >>> add_integer(2.3, -9)
    -7

The second argument is optional - Default to 98.

    >>> add_integer(-10)
    88

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If one of arguments is a non-integer and non-float value, a TypeError is raised:

    >>> add_integer("test", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(9, "shit")
    Traceback (most recent call last):
    TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Testing function with NaN numbers.

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


If both arguments are not integers and not floats values, 
a TypeError message is printed for the first argument.

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
